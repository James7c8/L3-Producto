# Si le pone `true` se registran y se muestran los comandos SQL.
# spring.jpa.show-sql=true

# Esto también registra los comandos SQL y los formatea muy bien. Sin embargo, cuando se muestra la entrada `values`
# sólo muestra (?, ?, ?).
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# Esto muestra los parámetros bind (los valores(?, ?, ?,...)). Recuerda EJECUTAR el programa para ver esto en práctica.
logging.level.org.hibernate.orm.jdbc.bind=trace


# Spring detecta los Drivers automaticamente por las dependencias instaladas:
#   <dependency>
#      <groupId>com.mysql</groupId>
#      <artifactId>mysql-connector-j</artifactId>
#      <scope>runtime</scope>
#   </dependency>
spring.datasource.url=jdbc:mysql://localhost/tienda?serverTimezone=America/Bogota&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=nvrx1234

# Configuracion DATA JPA
# Se utiliza para personalizar las esquemas generadas por la clase Entity.
# none: Hibernate no generará esquemas.
# create-only: Hibernate generará una nueva esquema desde cero, pero no intentará validar ni actualizarla si ya existe.
# create: Hibernate genarará una nueva esquema desde cero. Le hará drop o la validará o actualizar la que ya existe.
# drop: Hibernate hará drop a la esquema que ya existe, eliminandola toda, y empezará desde cero.
# create-drop: Hibernate hará drop a la esquema que ya existe, creará una nueva, y luego le hará drop cuando se termine la aplicacion.
# update: Hibernate actualizará la esquema que ya existe.
# validate: Hibernate validará la esquema pero no hará cambios a la esquema.
spring.jpa.hibernate.ddl-auto=update